{"version":3,"sources":["App.js","reportWebVitals.js","index.js","App.module.css"],"names":["Barrier","number","remove","P","setP","withH","H","checked","setChecked","useState","um","setUm","fm","setFm","useEffect","NaN","className","classes","barrier","type","onChange","target","disabled","min","value","parseFloat","onClick","App","id","barriers","setBarriers","setWithH","setH","total","reduce","accumulator","map","index","filter","deleteBarrier","Object","assign","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.72e3fc98.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport classes from './App.module.css'\r\n\r\nconst Barrier = ({ number, remove, P, setP, withH, H, checked, setChecked }) => {\r\n  const [um, setUm] = useState(0)\r\n  const [fm, setFm] = useState(0)\r\n\r\n  useEffect(() => {\r\n    if (um === 0 || fm === 0 || (withH && H === 0)) {\r\n      setP(NaN)\r\n    } else {\r\n      const result = withH\r\n        ? (1 / um) / (1 / um + 1 / fm + 1 / H)\r\n        : (1 / um) / (1 / um + 1 / fm)\r\n      setP(result)\r\n    }\r\n  }, [H, withH, um, fm])\r\n\r\n  return (\r\n    <div className={classes.barrier}>\r\n      <input\r\n        type='checkbox'\r\n        onChange={({ target }) => {\r\n          setChecked(target.checked)\r\n        }}\r\n        disabled={number === 1}\r\n        checked={checked}\r\n      />\r\n      <span>{`Преграда ${number}`}</span>\r\n      <span>um</span>\r\n      <input\r\n        type='number'\r\n        min={0}\r\n        value={um}\r\n        onChange={({ target }) => {\r\n          const value = parseFloat(target.value)\r\n          setUm(value)\r\n        }}/>\r\n      <span>fm</span>\r\n      <input\r\n        type='number'\r\n        min={0}\r\n        value={fm}\r\n        onChange={({ target }) => {\r\n          const value = parseFloat(target.value)\r\n          setFm(value)\r\n        }}/>\r\n      <span>{`Pнсд = ${P || 'Деление на ноль'}`}</span>\r\n      <span>{`Pзащ = ${1 - P || 'Деление на ноль'}`}</span>\r\n      {number !== 1 && <button onClick={remove}>Удалить</button>}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [barriers, setBarriers] = useState([{ id: 1, checked: true }])\r\n  const [withH, setWithH] = useState(false)\r\n  const [H, setH] = useState(0)\r\n\r\n  const deleteBarrier = (id) => {\r\n    setBarriers(barriers => barriers.filter(barrier => barrier.id !== id))\r\n  }\r\n\r\n  const setP = (id, P) => {\r\n    setBarriers(barriers => barriers.map(barrier => {\r\n      if (barrier.id === id) {\r\n        return Object.assign({}, barrier, { P })\r\n      } else {\r\n        return barrier\r\n      }\r\n    }))\r\n  }\r\n\r\n  const setChecked = (id, checked) => {\r\n    setBarriers(barriers => barriers.map(barrier => {\r\n      if (barrier.id === id) {\r\n        return Object.assign({}, barrier, { checked })\r\n      } else {\r\n        return barrier\r\n      }\r\n    }))\r\n  }\r\n\r\n  const total = 1 - barriers.reduce((accumulator, barrier) => {\r\n    if (!barrier.checked) return accumulator\r\n    accumulator = accumulator * barrier.P\r\n    return accumulator\r\n  }, 1)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Комплекс оценки защищённости</h1>\r\n      <p>Разработчики:</p>\r\n      <ul>\r\n        <li>Овчинникова М. А.</li>\r\n        <li>Ларюшина И. А.</li>\r\n        <li>Комиссарова Е. Г.</li>\r\n        <li>Кувшинов В. Л.</li>\r\n      </ul>\r\n      <hr />\r\n      <span className={classes.barrier}>\r\n        <span>Использовать H</span>\r\n        <input\r\n          type='checkbox'\r\n          onChange={({ target }) => { setWithH(target.checked) }}\r\n        />\r\n        {withH &&\r\n          <>\r\n            <span>H = </span>\r\n            <input\r\n              type='number'\r\n              value={H}\r\n              onChange={({ target }) => { setH(parseFloat(target.value)) }}\r\n            />\r\n          </>\r\n        }\r\n      </span>\r\n      {barriers.map(({ id, P, checked }, index) => (\r\n        <Barrier\r\n          key={id}\r\n          number={index + 1}\r\n          remove={() => { deleteBarrier(id) }}\r\n          setP={(P) => setP(id, P)}\r\n          setChecked={(checked) => setChecked(id, checked)}\r\n          checked={checked}\r\n          P={P}\r\n          withH={withH}\r\n          H={H}\r\n        />\r\n      ))}\r\n      <input\r\n        type='button'\r\n        value='Добавить преграду'\r\n        onClick={() => {\r\n          setBarriers([...barriers, { id: barriers.length + 1, checked: true }])\r\n        }}\r\n      />\r\n      <div className={classes.total}>{`Pзащ = ${total || 'Невозможно вычислить'}`}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"barrier\":\"App_barrier__3Rcoh\",\"total\":\"App_total__Nr4AS\"};"],"sourceRoot":""}